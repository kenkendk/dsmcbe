#ifndef SPUEVENTHANDLER_EXTRAPACKAGES_H_
#define SPUEVENTHANDLER_EXTRAPACKAGES_H_

#define PACKAGE_SPU_MEMORY_SETUP 200
#define PACKAGE_SPU_MEMORY_MALLOC_REQUEST 201
#define PACKAGE_SPU_MEMORY_MALLOC_RESPONSE 202
#define PACKAGE_SPU_MEMORY_FREE 203

#define PACKAGE_SPU_CSP_ITEM_CREATE_REQUEST 204
#define PACKAGE_SPU_CSP_ITEM_CREATE_RESPONSE 205

#define PACKAGE_SPU_CSP_ITEM_FREE_REQUEST 206
#define PACKAGE_SPU_CSP_ITEM_FREE_RESPONSE 207

#define PACKAGE_SPU_CSP_CHANNEL_READ_ALT_REQUEST 208
#define PACKAGE_SPU_CSP_CHANNEL_READ_ALT_RESPONSE 209

#define PACKAGE_SPU_CSP_CHANNEL_WRITE_ALT_REQUEST 210
#define PACKAGE_SPU_CSP_CHANNEL_WRITE_ALT_RESPONSE 211
#define PACKAGE_SPU_CSP_DIRECT_TRANSFER 212

#define PACKAGE_SPU_CSP_FLUSH_ITEM 250

#define PACKAGE_SPU_CSP_CHANNEL_SETUP_DIRECT 251
#define PACKAGE_SPU_CSP_CHANNEL_POISON_DIRECT 252
#define PACKAGE_SPU_CSP_DUMP_STATE 253

//The data object is in use by a SPU
#define CSP_ITEM_MODE_IN_USE 1
//The data object is on the source SPE, but no longer in use
#define CSP_ITEM_MODE_READY_FOR_TRANSFER 2
//The data object is currently being transfered
#define CSP_ITEM_MODE_IN_TRANSIT 3
//The data object has been flushed into main memory
#define CSP_ITEM_MODE_FLUSHED 4
//The data object has been transfered onto the target SPU
#define CSP_ITEM_MODE_SENT 5

//The number of elements each pending write consumes
#define SPE_PENDING_WRITE_SIZE (3)

//To make the SPU stop each time it awaits external data, activate this flag
//#define SPU_STOP_AND_WAIT

#endif /* SPUEVENTHANDLER_EXTRAPACKAGES_H_ */
